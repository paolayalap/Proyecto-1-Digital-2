/* 
 * File:   main_slave.c
 * Author: paola
 *
 * Created on 22 de septiembre de 2022, 21:13
 */

// PIC16F887 Configuration Bit Settings
//
// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//LIBRERIAS
#include <xc.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "I2C.h"

//DEFINICIONES
#define _XTAL_FREQ 8000000

//DECLARACION DE FUNCIONES
void setup(void);
void DS3232_read();
void alarm_read_display();
void DS3232_display();

//VARIABLES
int alarm_status;
char  time[]    = "Hora   :  :  ",
      alarm[]   = "Alarma   :  :00";
int8_t second, minute, hour, alarm_minute, alarm_hour;



//FUNCIONES

void main(void){
    setup();
    while(1){
        I2C_Master_Start();             //inicia el protocolo I2C
        I2C_Master_Write(0b11010000);   //direccion del DS3232
        I2C_Master_Write(0x00);         //manda la dirección del registro
        I2C_Master_RepeatedStart();     //reinicia el I2C
        I2C_Master_Write(0b11010001);   //inicia la lectura 
        second = I2C_Master_Read(1);    //lee los segundos del registro 0 
        minute = I2C_Master_Read(1);    //lee los minutos del registro 1
        hour = I2C_Master_Read(0);      //lee las horas del registro 2
        I2C_Master_Stop();              //detiene el protocolo I2C
        __delay_ms(200);
        
        I2C_Master_Start();             //inicia el protocolo I2C
        I2C_Master_Write(0b11010000);   //direccion del DS3232
        I2C_Master_Write(0x08);         //manda la dirección del registro
        I2C_Master_RepeatedStart();     //reinicia el I2C
        I2C_Master_Write(0b11010001);   //inicia la lectura   
        alarm_minute = I2C_Master_Read(1);
        alarm_hour = I2C_Master_Read(0);
        I2C_Master_Stop(); 
        __delay_ms(200);
        
        //Conversion BCD a decimal
        alarm_minute    = (alarm_minute >> 4) * 10 + (alarm_minute & 0x0F);
        alarm_hour      = (alarm_hour >> 4) * 10 + (alarm_hour & 0x0F);

        alarm[8]    = alarm_minute % 10 + 48;
        alarm[7]    = alarm_minute / 10 + 48;
        alarm[5]    = alarm_hour % 10 + 48;
        alarm[4]    = alarm_hour / 10 + 48;
        
        minute = ((minute / 10) << 4) + (minute % 10);
        hour = ((hour /10) << 4) + (hour % 10);

        }
    return;
}

//CONFIGURACIONES 
void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISC = 0;
    PORTC = 0;
    I2C_Master_Init(100000);
}
